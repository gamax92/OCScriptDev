#!/usr/bin/luajit
local filename
local dither = true
local width = 160
local height = 100

local args = {...}
local i = 1
while i <= #args do
	local arg = args[i]
	if arg:sub(1,1) == "-" then
		if arg == "-w" then
			i = i + 1 if tonumber(args[i]) == nil then print("Invalid value for '-w'") os.exit(1) end
			width = tonumber(args[i])
		elseif arg == "-h" then
			i = i + 1 if tonumber(args[i]) == nil then print("Invalid value for '-h'") os.exit(1) end
			height = tonumber(args[i])
		elseif arg == "-nodither" then
			dither = false
		elseif arg == "-dither" then
			dither = true
		else
			print("Invalid argument '" .. arg .. "'")
			os.exit(1)
		end
	elseif filename == nil then
		filename = arg
	else
		print("Extra filename '" .. arg .. "' specified")
		os.exit(1)
	end
	i = i + 1
end
if filename == nil then
	print([[
Usage: imageparse [options] picture

Options:
  -w         Set image width
  -h         Set image height
  -nodither  Disable dithering
  -dither    Enable dithering (default)
]])
	return
end
if height % 2 == 1 then
	height = height + 1
	print("Warning: Extending height to " .. height)
end
os.execute("mkdir -p tmp")
-- Convert image
os.execute("convert \"" .. filename .. "\" -resize " .. width .. "x" .. height .. "! -dither " .. (dither and "FloydSteinberg" or "None") .. " -colors 16 tmp/image.txt")
os.execute("convert tmp/image.txt tmp/image2.png")
os.execute("convert tmp/image.txt -filter point -resize " .. width * 4 .. "x" .. height * 4 .. "! preview-small.png")
os.execute("convert tmp/image.txt -filter point -resize " .. width * 6 .. "x" .. height * 6 .. "! preview-med.png")
os.execute("convert tmp/image.txt -filter point -resize " .. width * 8 .. "x" .. height * 8 .. "! preview-large.png")
-- Read image
palindex = 0
palette = {}
palrev = {}
img = {}
for line in io.lines("tmp/image.txt") do
	if line:sub(1,1) ~= "#" and line ~= "" then
		color = line:match("#(.-) ")
		posX,posY = line:match("(.-),(.-):")
		posX,posY = tonumber(posX) + 1, tonumber(posY) + 1
		if img[posY] == nil then img[posY] = {} end
		img[posY][posX] = color
		if palrev[color] == nil then
			palindex = palindex + 1
			palrev[color] = palindex
			palette[palindex] = color
		end
	end
end
print("Loaded " .. palindex .. " colors")
-- Write header
local newfile = io.open("ocimage.lua","wb")
newfile:write([[load([[local r=require
local u,h=r"computer".uptime,r"component".gpu
local m,s,b,c,d,e,g,t,x,_=r"unicode".char(9604)," ",h.setBackground,h.setForeground,h.fill,h.set,("").rep,true,function(c,d)_=h.getPaletteColor(c)~=d and h.setPaletteColor(c,d)end
local z=u()
]])
-- Set palette colors
newfile:write("for k,cd in pairs({[0]=")
for i = 1,palindex do
	if #tostring(tonumber(palette[i],16)) < (#palette[i]+2) then
		newfile:write(tonumber(palette[i],16) .. "")
	else
		newfile:write("0x" .. palette[i])
	end
	if i < palindex then
		newfile:write(",")
	end
end
newfile:write("})do x(k,cd)end\n]]..(\"")
--[[
Fake functions:
b# -> b(#,true)
c# -> c(#,true)
f? -> d(1,1,width,height,?)
h#,#,#,? -> e(#,#,g(?,#))
v#,#,#,? -> e(#,#,g(?,#),true)
d#,#,? -> e(#,#,?)
--]]
local function hex(x) return string.format("%X",x) end
-- Gather palette usage stats
local stats = {}
for ti = 1,palindex do
	for bi = 1,palindex do
		local piececount = 0
		for y = 1,#img - 1, 2 do
			for x = 1,#img[1] do
				if palrev[img[y][x]] == ti and palrev[img[y+1][x]] == bi then
					piececount = piececount + 1
				end
			end
		end
		if piececount > 0 then
			stats[#stats + 1] = {ti,bi,piececount}
		end
	end
end
table.sort(stats,function(a,b) return a[3] > b[3] end)
local callsbg, callsfg, callsd = 1, 1, 1
-- Flood fill most used palette, kick off stack
print("Flood fill reducing " .. stats[1][3] .. " block" .. (stats[1][3] == 1 and "" or "s"))
newfile:write('b' .. hex(stats[1][1] - 1) .. ' ')
newfile:write('c' .. hex(stats[1][2] - 1) .. ' ')
newfile:write('f' .. ((stats[1][1] == stats[1][2]) and "s" or "m") .. ' ')
local lastti, lastbi = stats[1][1], stats[1][2]
table.remove(stats,1)
io.stdout:write("Testing drawing methods ... ")
io.stdout:flush()
-- Horiz and Vert check
local horiz = {}
local vertz = {}
local dynam = {}
for i = 1,#stats do
	local ti = stats[i][1]
	local bi = stats[i][2]
	local calls = 0
	for y = 1,#img - 1, 2 do
		local blockcount = 0
		for x = 1,#img[1] do
			if palrev[img[y][x]] == ti and palrev[img[y+1][x]] == bi then
				blockcount = blockcount + 1
			else
				if blockcount > 0 then
					local touse = (ti == bi) and "s" or "m"
					calls = calls + 1
				end
				blockcount = 0
			end
		end
		if blockcount > 0 then
			local touse = (ti == bi) and "s" or "m"
			calls = calls + 1
		end
	end
	horiz[i] = calls
end
for i = 1,#stats do
	local ti = stats[i][1]
	local bi = stats[i][2]
	local calls = 0
	for x = 1,#img[1] do
		local blockcount = 0
		for y = 1,#img - 1, 2 do
			if palrev[img[y][x]] == ti and palrev[img[y+1][x]] == bi then
				blockcount = blockcount + 1
			else
				if blockcount > 0 then
					local touse = (ti == bi) and "s" or "m"
					calls = calls + 1
				end
				blockcount = 0
			end
		end
		if blockcount > 0 then
			local touse = (ti == bi) and "s" or "m"
			calls = calls + 1
		end
	end
	vertz[i] = calls
end
for i = 1,#stats do
	local ti = stats[i][1]
	local bi = stats[i][2]
	local calls = 0
	local donttouch = {}
	for y = 1,#img - 1, 2 do
		donttouch[y] = {}
	end
	for y = 1,#img - 1, 2 do
		for x = 1,#img[1] do
			if palrev[img[y][x]] == ti and palrev[img[y+1][x]] == bi and donttouch[y][x] ~= true then
				local xlength = 0
				local ylength = 0
				for nx = x,#img[1] do
					if palrev[img[y][nx]] ~= ti or palrev[img[y+1][nx]] ~= bi then break end
					xlength = xlength + 1
				end
				for yx = y,#img - 1, 2 do
					if palrev[img[yx][x]] ~= ti or palrev[img[yx+1][x]] ~= bi then break end
					ylength = ylength + 1
				end
				local touse = (ti == bi) and "s" or "m"
				if xlength > ylength then
					calls = calls + 1
					for brk = x,x+xlength-1 do
						donttouch[y][brk] = true
					end
				else
					calls = calls + 1
					for brk = y,y+((ylength-1)*2),2 do
						donttouch[brk][x] = true
					end
				end
			end
		end
	end
	dynam[i] = calls
end
print("Done!")
for i = 1,#stats do
	local tp = math.min(horiz[i],vertz[i],dynam[i])
	local entries = {}
	if tp == horiz[i] then entries[#entries+1] = "Horiz" end
	if tp == vertz[i] then entries[#entries+1] = "Vertz" end
	if tp == dynam[i] then entries[#entries+1] = "Dynam" end
	print(i .. ": " .. table.concat(entries,", "))
	print(i .. ": " .. horiz[i] .. " " .. vertz[i] .. " " .. dynam[i])
end
-- Go through stack
for i = 1,#stats do
	local ti = stats[i][1]
	local bi = stats[i][2]
	if lastti ~= ti then
		newfile:write('b' .. hex(ti - 1) .. ' ')
		callsbg = callsbg + 1
		lastti = ti
	end
	if lastbi ~= bi and bi ~= ti then
		newfile:write('c' .. hex(bi - 1) .. ' ')
		callsfg = callsfg + 1
		lastbi = bi
	end
	if horiz[i] < vertz[i] and horiz[i] < dynam[i] then
		for y = 1,#img - 1, 2 do
			local blockcount = 0
			local startx = 1
			for x = 1,#img[1] do
				if palrev[img[y][x]] == ti and palrev[img[y+1][x]] == bi then
					if blockcount == 0 then startx = x end
					blockcount = blockcount + 1
				else
					if blockcount > 0 then
						local touse = (ti == bi) and "s" or "m"
						if blockcount > 1 then
							newfile:write('h' .. hex(startx) .. ',' .. hex((y + 1) / 2) .. ',' .. hex(blockcount) .. ',' .. touse .. ' ')
						else
							newfile:write('d' .. hex(startx) .. "," .. hex((y + 1) / 2) .. ',' .. touse .. ' ')
						end
						callsd = callsd + 1
					end
					blockcount = 0
				end
			end
			if blockcount > 0 then
				local touse = (ti == bi) and "s" or "m"
				if blockcount > 1 then
					newfile:write('h' .. hex(startx) .. ',' .. hex((y + 1) / 2) .. ',' .. hex(blockcount) .. ',' .. touse .. ' ')
				else
					newfile:write('d' .. hex(startx) .. "," .. hex((y + 1) / 2) .. ',' .. touse .. ' ')
				end
				callsd = callsd + 1
			end
		end
	elseif vertz[i] < horiz[i] and vertz[i] < dynam[i] then
		for x = 1,#img[1] do
			local blockcount = 0
			local starty = 1
			for y = 1,#img - 1, 2 do
				if palrev[img[y][x]] == ti and palrev[img[y+1][x]] == bi then
					if blockcount == 0 then starty = (y + 1) / 2 end
					blockcount = blockcount + 1
				else
					if blockcount > 0 then
						local touse = (ti == bi) and "s" or "m"
						if blockcount > 1 then
							newfile:write('v' .. hex(x) .. "," .. hex(starty) .. ',' .. hex(blockcount) .. ',' .. touse .. ' ')
						else
							newfile:write('d' .. hex(x) .. "," .. hex(starty) .. ',' .. touse .. ' ')
						end
						callsd = callsd + 1
					end
					blockcount = 0
				end
			end
			if blockcount > 0 then
				local touse = (ti == bi) and "s" or "m"
				if blockcount > 1 then
					newfile:write('v' .. hex(x) .. "," .. hex(starty) .. ',' .. hex(blockcount) .. ',' .. touse .. ' ')
				else
					newfile:write('d' .. hex(x) .. "," .. hex(starty) .. ',' .. touse .. ' ')
				end
				callsd = callsd + 1
			end
		end
	else
		local donttouch = {}
		for y = 1,#img - 1, 2 do
			donttouch[y] = {}
		end
		for y = 1,#img - 1, 2 do
			for x = 1,#img[1] do
				if palrev[img[y][x]] == ti and palrev[img[y+1][x]] == bi and donttouch[y][x] ~= true then
					local xlength = 0
					local ylength = 0
					for nx = x,#img[1] do
						if palrev[img[y][nx]] ~= ti or palrev[img[y+1][nx]] ~= bi then break end
						xlength = xlength + 1
					end
					for yx = y,#img - 1, 2 do
						if palrev[img[yx][x]] ~= ti or palrev[img[yx+1][x]] ~= bi then break end
						ylength = ylength + 1
					end
					local touse = (ti == bi) and "s" or "m"
					if xlength > ylength then
						if xlength > 1 then
							newfile:write('h' .. hex(x) .. "," .. hex((y + 1) / 2) .. ',' .. hex(xlength) .. ',' .. touse .. ' ')
						else
							newfile:write('d' .. hex(x) .. "," .. hex((y + 1) / 2) .. ',' .. touse .. ' ')
						end
						callsd = callsd + 1
						for brk = x,x+xlength-1 do
							donttouch[y][brk] = true
						end
					else
						if ylength > 1 then
							newfile:write('v' .. hex(x) .. "," .. hex((y + 1) / 2) .. ',' .. hex(ylength) .. ',' .. touse .. ' ')
						else
							newfile:write('d' .. hex(x) .. "," .. hex((y + 1) / 2) .. ',' .. touse .. ' ')
						end
						callsd = callsd + 1
						for brk = y,y+((ylength-1)*2),2 do
							donttouch[brk][x] = true
						end
					end
				end
			end
		end
	end
end
newfile:write([[b0 "):gsub("b(%x-) ",function(a)return"b(0x"..a..",true)"end):gsub("c(%x-) ",function(a)return"c(0x"..a..",true)"end):gsub("f(.) ",function(a)return"d(1,1,]] .. width .. [[,]] .. height .. [[,"..a..")"end):gsub("h(%x-),(%x-),(%x-),(.) ",function(a,b,d,c)return"e(0x"..a..",0x"..b..",g("..c..",0x"..d.."))"end):gsub("v(%x-),(%x-),(%x-),(.) ",function(a,b,d,c)return"e(0x"..a..",0x"..b..",g("..c..",0x"..d.."),true)"end):gsub("d(%x-),(%x-),(.) ",function(a,b,c)return"e(0x"..a..",0x"..b..","..c..")"end).."print(u()-z)")()
]])
newfile:close()
print("Done")
print(callsbg,callsfg,callsd,callsbg+callsfg+callsd,((callsbg/128)+(callsfg/128)+(callsd/256))/20 .. "s")
